TODO:
- fix UNSAFE bitboard updating problem in negamax?
- QSEARCH: CALL NEGAMAX IF IN CHECK (currently returning alpha)
- transposition table
- late move reduction
- null move pruning (commented out)
- internal iterative deepening (for move ordering)
- experiment with LMR conditions
- in move generation function end we return num_moves instead of just j
- move scoring:
  - score promotions?
  - extra score if check? (or maybe search already has that covered)
- add 'go perft' functionality
- add "board has non-pawn material" condition in null move pruning
- experiment with tt structure to reduce size
- clear the TT on UCI position command

RENAMES:
- engine.cpp/h -> search.cpp/h
- board::num_moves_played -> board::ply

TO TRY/RESEARCH:
- lazy SMP
- delta pruning
- futility pruning
- razoring
- reverse futility pruning
- static exchange evaluation pruning
- multi-cut

DONE:
- implement PST
- negamax a/b
- qsearch
- mvv/lva move ordering
- bishop pair in evaluation
- killer/history heuristics
- iterative deepening
- check extensions
- PVS
- LMR
- aspiration windows

history move heuristic: could take it or leave it
do we need to clear helper tables in search() ?

question: why does stockfish use depth-limited qsearch?
